#lang racket
(define InvertCaptcha
  (lambda (captcha)
    (sommaStringhe (StringCaptcha captcha))
    ))
(define StringCaptcha
  (lambda (captcha)
    (let ((x (substring captcha 0 1)))
      (let ((z (substring captcha (- (string-length captcha) 1))))
        (let ((k (substring captcha 1)))
                (cond ((= (string-length captcha) 1) "")
                      ((string=? "" (verificaStringa captcha 1)) captcha)
                      ((string=? x z) (string-append x (StringCaptcha k)))
                      ((string=? x (substring captcha 1 2)) (string-append x (StringCaptcha k)))
                      (else (StringCaptcha k)))
        )))
  ))
(define verificaStringa
  (lambda (str i)
    (let ((x (substring str 0 1)))
      (let ((z (substring str (- (string-length str) 1))))
        (let ((k (substring str 1)))
          (if (and (= (string-length str) 2) (string=? x z) (> i (string-length str)))
              ""
              (if (> (string-length str) 1)
                  (if (string=? x z)
                      (verificaStringa k (+ i 1))
                      (verificaStringa k i))
                  "non uguale"))
          )))
    ))
(define sommaStringhe
  (lambda (str)
      (if (> (string-length str) 0)
          (+ (Calcolo (substring str 0 1)) (sommaStringhe (substring str 1)))
          0)
    ))
(define Calcolo
  (lambda (captcha)
    (let ((x (substring captcha 0 1)))
      (cond ((string=? "1" x) 1)
            ((string=? "2" x) 2)
            ((string=? "3" x) 3)
            ((string=? "4" x) 4)
            ((string=? "5" x) 5)
            ((string=? "6" x) 6)
            ((string=? "7" x) 7)
            ((string=? "8" x) 8)
            ((string=? "9" x) 9)
            ((string=? ""  x) 0))
    )
  ))
(InvertCaptcha "1122")
(InvertCaptcha "1111")
(InvertCaptcha "1234")
(InvertCaptcha "91212129")
